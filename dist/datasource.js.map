{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","db","jsonData","mongodb_tag","q","withCredentials","headers","basicAuth","length","options","query","buildQueryParameters","targets","filter","t","hide","when","data","doRequest","method","then","response","status","message","title","display_status","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","$$status","$$config","config","interpolated","target","mapToTextValue","map","d","i","text","value","isObject","datasourceRequest","scopedVars","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.db = instanceSettings.jsonData.mongodb_tag;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = { \"Content-Type\": \"application/json\" };\n    if (\n      typeof instanceSettings.basicAuth === \"string\" &&\n      instanceSettings.basicAuth.length > 0\n    ) {\n      this.headers[\"Authorization\"] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter((t) => !t.hide);\n    query.db = this.db;\n\n    if (query.targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    return this.doRequest({\n      url: this.url + \"/query\",\n      data: query,\n      method: \"POST\",\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + \"/\",\n      data: { db: this.db },\n      method: \"POST\",\n    }).then((response) => {\n      if (response.status === 200) {\n        return {\n          status: response.data.status,\n          message: response.data.message,\n          title: response.data.display_status,\n        };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, \"glob\");\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query,\n      },\n      rangeRaw: options.rangeRaw,\n    };\n\n    return this.doRequest({\n      url: this.url + \"/annotations\",\n      method: \"POST\",\n      data: annotationQuery,\n    }).then((result) => {\n      response.data.$$status = result.status;\n      response.data.$$config = result.config;\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n    var interpolated = {\n      target: this.templateSrv.replace(query, null, \"\"),\n    };\n    interpolated.db = this.db;\n\n    return this.doRequest({\n      url: this.url + \"/search\",\n      data: interpolated,\n      method: \"POST\",\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i };\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove place holder targets\n    options.targets = _.filter(options.targets, (target) => {\n      return target.target !== \"select metric\";\n    });\n\n    var targets = _.map(options.targets, (target) => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, \"\"),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || \"timeserie\",\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}